require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Guara
  describe PlanContactsController do
  
    # This should return the minimal set of attributes required to create a valid
    # PlanContact. As you add validations to PlanContact, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      { "subject" => "MyString" }
    end
  
    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # PlanContactsController. Be sure to keep this updated too.
    def valid_session
      {}
    end
  
    describe "GET index" do
      it "assigns all plan_contacts as @plan_contacts" do
        plan_contact = PlanContact.create! valid_attributes
        get :index, {}, valid_session
        assigns(:plan_contacts).should eq([plan_contact])
      end
    end
  
    describe "GET show" do
      it "assigns the requested plan_contact as @plan_contact" do
        plan_contact = PlanContact.create! valid_attributes
        get :show, {:id => plan_contact.to_param}, valid_session
        assigns(:plan_contact).should eq(plan_contact)
      end
    end
  
    describe "GET new" do
      it "assigns a new plan_contact as @plan_contact" do
        get :new, {}, valid_session
        assigns(:plan_contact).should be_a_new(PlanContact)
      end
    end
  
    describe "GET edit" do
      it "assigns the requested plan_contact as @plan_contact" do
        plan_contact = PlanContact.create! valid_attributes
        get :edit, {:id => plan_contact.to_param}, valid_session
        assigns(:plan_contact).should eq(plan_contact)
      end
    end
  
    describe "POST create" do
      describe "with valid params" do
        it "creates a new PlanContact" do
          expect {
            post :create, {:plan_contact => valid_attributes}, valid_session
          }.to change(PlanContact, :count).by(1)
        end
  
        it "assigns a newly created plan_contact as @plan_contact" do
          post :create, {:plan_contact => valid_attributes}, valid_session
          assigns(:plan_contact).should be_a(PlanContact)
          assigns(:plan_contact).should be_persisted
        end
  
        it "redirects to the created plan_contact" do
          post :create, {:plan_contact => valid_attributes}, valid_session
          response.should redirect_to(PlanContact.last)
        end
      end
  
      describe "with invalid params" do
        it "assigns a newly created but unsaved plan_contact as @plan_contact" do
          # Trigger the behavior that occurs when invalid params are submitted
          PlanContact.any_instance.stub(:save).and_return(false)
          post :create, {:plan_contact => { "subject" => "invalid value" }}, valid_session
          assigns(:plan_contact).should be_a_new(PlanContact)
        end
  
        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          PlanContact.any_instance.stub(:save).and_return(false)
          post :create, {:plan_contact => { "subject" => "invalid value" }}, valid_session
          response.should render_template("new")
        end
      end
    end
  
    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested plan_contact" do
          plan_contact = PlanContact.create! valid_attributes
          # Assuming there are no other plan_contacts in the database, this
          # specifies that the PlanContact created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          PlanContact.any_instance.should_receive(:update_attributes).with({ "subject" => "MyString" })
          put :update, {:id => plan_contact.to_param, :plan_contact => { "subject" => "MyString" }}, valid_session
        end
  
        it "assigns the requested plan_contact as @plan_contact" do
          plan_contact = PlanContact.create! valid_attributes
          put :update, {:id => plan_contact.to_param, :plan_contact => valid_attributes}, valid_session
          assigns(:plan_contact).should eq(plan_contact)
        end
  
        it "redirects to the plan_contact" do
          plan_contact = PlanContact.create! valid_attributes
          put :update, {:id => plan_contact.to_param, :plan_contact => valid_attributes}, valid_session
          response.should redirect_to(plan_contact)
        end
      end
  
      describe "with invalid params" do
        it "assigns the plan_contact as @plan_contact" do
          plan_contact = PlanContact.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          PlanContact.any_instance.stub(:save).and_return(false)
          put :update, {:id => plan_contact.to_param, :plan_contact => { "subject" => "invalid value" }}, valid_session
          assigns(:plan_contact).should eq(plan_contact)
        end
  
        it "re-renders the 'edit' template" do
          plan_contact = PlanContact.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          PlanContact.any_instance.stub(:save).and_return(false)
          put :update, {:id => plan_contact.to_param, :plan_contact => { "subject" => "invalid value" }}, valid_session
          response.should render_template("edit")
        end
      end
    end
  
    describe "DELETE destroy" do
      it "destroys the requested plan_contact" do
        plan_contact = PlanContact.create! valid_attributes
        expect {
          delete :destroy, {:id => plan_contact.to_param}, valid_session
        }.to change(PlanContact, :count).by(-1)
      end
  
      it "redirects to the plan_contacts list" do
        plan_contact = PlanContact.create! valid_attributes
        delete :destroy, {:id => plan_contact.to_param}, valid_session
        response.should redirect_to(plan_contacts_url)
      end
    end
  
  end
end
